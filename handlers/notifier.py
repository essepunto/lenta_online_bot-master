import re

from aiogram import Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.exceptions import BotBlocked

import config
from create_bot import bot, dp
from models import db


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞
def extract_product_info(text):
    match = re.search(
        r'SKU:\s*(\d+)\s*–û—Å—Ç–∞—Ç–∫–∏:\s*(\d+)\s*(?:–∫–≥|—à—Ç).*?–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:\s*(.*?)\s*–ù–æ–º–µ—Ä —Å–µ–∫—Ü–∏–∏:\s*(\d+)\s*–°–µ–∫—Ü–∏—è:\s*(.*?)\s*–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–±–æ—Ä–∫–∏:\s*([–∞-—è–ê-–Ø—ë–Åa-zA-Z0-9\s:]+)',
        text, re.DOTALL)
    if match:
        return {
            "sku": match.group(1),
            "quantity": match.group(2),
            "name": match.group(3).strip(),
            "section_number": match.group(4),
            "section": match.group(5).strip(),

        }
    else:
        return {
            "sku": None,
            "quantity": None,
            "name": None,
            "section_number": None,
            "section": None,

        }


# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–≤–∞—Ä–µ
async def process_sku_message(text, chat_id, message_id):
    product_info = extract_product_info(text)
    if not product_info["sku"]:
        print("SKU —Ç–æ–≤–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.")
        return

    if not product_info["section"]:
        print("–°–µ–∫—Ü–∏—è —Ç–æ–≤–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.")
        return

    await notify_users_about_product(product_info, chat_id, message_id)


async def notify_users_about_product(product_info, chat_id, message_id):
    section = product_info["section"]
    user_ids = db.get_user_ids_by_section(section)
    for user_id in user_ids:
        await send_product_info_to_user(user_id, product_info, chat_id, message_id)


async def send_product_info_to_user(user_id, product_info, chat_id, message_id):
    try:
        is_work = db.get_work_status_by_user_id(user_id)
        if is_work:
            await send_sku_message(user_id, product_info, chat_id, message_id)
    except BotBlocked:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}, —Ç–∞–∫ –∫–∞–∫ –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")


async def send_sku_message(user_id, product_info, chat_id, message_id):
    name = product_info["name"]
    section = product_info["section"]
    chat_id_str = str(chat_id)[4:]
    link = f"https://t.me/c/{chat_id_str}/{message_id}"

    link_button = InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é üí¨", url=link)
    keyboard = InlineKeyboardMarkup().add(link_button)

    message_text = (
        f"üìä –°–µ–∫—Ü–∏—è: {section}\n"
        f"üõí –¢–æ–≤–∞—Ä: {name}\n"
    )

    await bot.send_message(user_id, message_text, reply_markup=keyboard)


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–æ—Ç–æ
async def handle_photo_message(message: types.Message):
    if message.caption:
        chat_id = message.chat.id
        message_id = message.message_id
        caption = message.caption
        async with dp.current_state(chat=message.chat.id).proxy():
            await process_sku_message(caption, chat_id, message_id)
            print(chat_id)


async def user_left(message: types.Message):
    user_id = message.left_chat_member.id
    username = message.left_chat_member.username
    db.remove_user_by_id(user_id)
    await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç –∏ –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")


# –§—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤
def register_handlers(dp: Dispatcher):
    dp.register_message_handler(handle_photo_message, content_types=['photo'])
    dp.register_message_handler(user_left, content_types=['left_chat_member'])
