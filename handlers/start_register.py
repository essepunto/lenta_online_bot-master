from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

import keyboards
from create_bot import bot, dp
from models.db import create_user, is_user_registered, get_work_status_by_user_id, update_work_status
from states import RegisterUserState
from utils.section_mapper import section_mapping

async def toggle_work_status(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    is_work = get_work_status_by_user_id(user_id)
    new_status = not is_work  # –ò–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
    update_work_status(user_id, new_status)  # –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

    if new_status:
        await bot.send_message(message.from_user.id,'–í–∞—à —Å—Ç–∞—Ç—É—Å "–ù–∞ —Ä–∞–±–æ—Ç–µ"\n'
                            '—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã')
    else:
        await bot.send_message(message.from_user.id,'–í–∞—à —Å—Ç–∞—Ç—É—Å "–î–æ–º–∞"\n'
                            '—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã')
async def start(message: types.Message):
    await bot.send_message(message.from_user.id, f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, @{message.from_user.username}!\n'
                                            f'–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É /register')

async def register_command(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    if is_user_registered(user_id):
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("–î–∞", callback_data="add_more_sections"))
        markup.add(InlineKeyboardButton("–ù–µ—Ç", callback_data="no_more_sections"))

        await message.reply('–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë —Å–µ–∫—Ü–∏–∏?', reply_markup=markup)
    else:
        await RegisterUserState.waiting_for_section.set()
        await bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∫—Ü–∏–∏ (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ) –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É –Ω–∏–∂–µ\nüíæ---- /save ----üíæ", reply_markup=keyboards.markup_register)

@dp.callback_query_handler(lambda c: c.data == 'add_more_sections')
async def add_more_sections(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    await RegisterUserState.waiting_for_section.set()
    await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–µ–∫—Ü–∏–∏ –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É –Ω–∏–∂–µ\nüíæ---- /save ----üíæ:", reply_markup=keyboards.markup_register)

@dp.callback_query_handler(lambda c: c.data == 'no_more_sections')
async def no_more_sections(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–µ–∫—Ü–∏–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
    await bot.edit_message_reply_markup(chat_id=callback_query.message.chat.id,
                                        message_id=callback_query.message.message_id,
                                        reply_markup=None)

async def handle_section_choice(callback: types.CallbackQuery, state: FSMContext):
    section_code = callback.data
    user_data = await state.get_data()
    selected_sections = user_data.get("selected_sections", [])
    selected_sections.append(section_code)
    await state.update_data(selected_sections=selected_sections)

    await callback.answer("–°–µ–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –µ—â–µ —Å–µ–∫—Ü–∏–∏ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–æ–º–∞–Ω–¥—É \n/save –≤—ã—à–µ ‚òùÔ∏è", show_alert=True)

async def finish_registration(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    selected_section_codes = user_data.get("selected_sections", [])

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Å–µ–∫—Ü–∏—è –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞
    if not selected_section_codes:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å–µ–∫—Ü–∏—é. –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ \"–û—Ç–º–µ–Ω–∞\"",reply_markup=keyboards.markup)
        return

    selected_section_names = [section_mapping.get(code, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å–µ–∫—Ü–∏—è") for code in selected_section_codes]

    user_id = message.from_user.id
    first_name = message.from_user.first_name
    is_work = True

    create_user(user_id, first_name, selected_section_names, is_work)
    await state.finish()


    if len(selected_section_names) == 1:
        await message.reply(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–µ–∫—Ü–∏—é: {selected_section_names[0]}. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",reply_markup=types.ReplyKeyboardRemove())

    else:
        await message.reply(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–µ–∫—Ü–∏–∏: {', '.join(selected_section_names)}. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",reply_markup=types.ReplyKeyboardRemove())

async def cancel_action(message: types.Message, state: FSMContext):
    await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=types.ReplyKeyboardRemove())


def register_handlers_client(dp):
    dp.register_message_handler(cancel_action,lambda message: message.text and message.text.lower() == "–æ—Ç–º–µ–Ω–∞", state="*")
    dp.register_message_handler(start, commands=['start'], state=None)
    dp.register_message_handler(register_command, commands=['register'], state=None)
    dp.register_callback_query_handler(handle_section_choice, state=RegisterUserState.waiting_for_section)
    dp.register_message_handler(finish_registration, commands=['save'], state=RegisterUserState.waiting_for_section)
    dp.register_message_handler(toggle_work_status, commands=['change_status'], state=None)

